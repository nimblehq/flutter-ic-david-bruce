# frozen_string_literal: true

require './Constants/Constants'
require './Constants/Environments'
require './Managers/BuildManager'
require './Managers/DistributionManager'
require './Managers/MatchManager'

builder = BuildManager.new(fastlane: self)

distribution_manager = DistributionManager.new(
  fastlane: self,
  build_path: Constants.BUILD_PATH
)

match_manager = MatchManager.new(
  fastlane: self,
  keychain_name: Constants.KEYCHAIN_NAME,
  keychain_password: Constants.KEYCHAIN_PASSWORD,
  is_ci: Environments.CI
)

before_all do
  ensure_bundle_exec
end

default_platform(:ios)

platform :ios do

  # Code Sign

  desc 'Sync AppStore Staging signing'
  lane :sync_appstore_staging_signing do
    match_manager.sync_app_store_signing(app_identifier: [Constants.BUNDLE_ID_STAGING])
  end

  desc 'Sync AppStore production signing'
  lane :sync_appstore_production_signing do
    match_manager.sync_app_store_signing(app_identifier: [Constants.BUNDLE_ID_PRODUCTION])
  end

  desc 'Register new devices'
  lane :register_new_device do
    device_name = prompt(text: 'Enter the device name: ')
    device_udid = prompt(text: 'Enter the device UDID: ')
    device_hash = {}
    device_hash[device_name] = device_udid
    register_devices(devices: device_hash)
    match(force: true)
  end

  # Testflight

  desc 'Build and upload Staging app to Test Flight'
  lane :build_and_upload_testflight_app do
    set_app_version
    bump_build
    builder.build_app_store(
      Constants.SCHEME_NAME_STAGING,
      Constants.PRODUCT_NAME_STAGING,
      Constants.BUNDLE_ID_STAGING,
      false
    )
    set_connect_api_key
    upload_build_to_testflight
  end

  desc 'upload develop build to Test Flight'
  private_lane :upload_build_to_testflight do
    distribution_manager.upload_to_testflight(
      product_name: Constants.PRODUCT_NAME_STAGING,
      bundle_identifier: Constants.BUNDLE_ID_STAGING
    )
  end

  # AppStore

  desc 'Build and upload production app to TestFlight'
  lane :build_and_upload_app_store_connect_app do
    set_app_version
    bump_build
    builder.build_app_store(
      Constants.SCHEME_NAME_PRODUCTION,
      Constants.PRODUCT_NAME_PRODUCTION,
      Constants.BUNDLE_ID_PRODUCTION,
      false
    )
    set_connect_api_key
    upload_build_to_app_store_connect
  end

  desc 'Upload production build to TestFlight'
  private_lane :upload_build_to_app_store_connect do
    distribution_manager.upload_to_testflight(
      product_name: Constants.PRODUCT_NAME_PRODUCTION,
      bundle_identifier: Constants.BUNDLE_ID_PRODUCTION
    )
  end

  desc 'set App Store Connect API Key'
  lane :set_connect_api_key do
    app_store_connect_api_key(
      key_id: Constants.APP_STORE_KEY_ID,
      issuer_id: Constants.APP_STORE_ISSUER_ID,
      key_content: Environments.APPSTORE_CONNECT_API_KEY,
      is_key_content_base64: true
    )
  end

  # Private helper lanes

  desc 'check if any specific version number in build environment'
  private_lane :set_app_version do
    # Set up env var MANUAL_VERSION if we need to override the version number
    if (Environments.MANUAL_VERSION || '') != ''
      increment_version_number(
        version_number: Environments.MANUAL_VERSION
      )
    end
  end

  desc 'set build number with number of commits'
  private_lane :bump_build do
    increment_build_number(
      build_number: ENV["GITHUB_RUN_NUMBER"],
      xcodeproj: Constants.PROJECT_PATH
    )
  end
end
